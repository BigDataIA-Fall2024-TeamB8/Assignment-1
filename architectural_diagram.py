# -*- coding: utf-8 -*-
"""Architectural_diagram.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nAfwcVS45-7h6WLad5R-_xS-yHJ8zf2c

# **Architectural Diagram**

Importing the Diagrams library
"""

!pip install diagrams
!apt-get install -y graphviz

!ls

import os
import requests

# Directory to store images
image_dir = "/usr/local/share/diagrams/resources/custom"

# Create directory if it does not exist
os.makedirs(image_dir, exist_ok=True)

# List of image URLs and filenames
image_urls = {
    "huggingface": "https://huggingface.co/front/assets/huggingface_logo.svg",  # Correct Hugging Face logo
    "streamlit": "https://streamlit.io/images/brand/streamlit-mark-color.png",  # Streamlit logo
    "openai": "https://seeklogo.com/images/O/open-ai-logo-8B9BFEDC26-seeklogo.com.png",  # OpenAI logo
}

# Download and save images
for name, url in image_urls.items():
    try:
        response = requests.get(url)
        response.raise_for_status()  # Check for HTTP errors
        image_path = os.path.join(image_dir, f"{name}.png")

        # Save image
        with open(image_path, "wb") as f:
            f.write(response.content)
        print(f"Downloaded {name} icon successfully.")
    except Exception as e:
        print(f"Failed to download {name} icon: {e}")

# Importing diagrams with custom icons
from diagrams import Diagram, Cluster, Edge, Node
from diagrams.custom import Custom
from diagrams.aws.storage import S3
from diagrams.onprem.client import Users

# Define custom icon class
class CustomIcon(Node):
    _provider = "custom"
    _icon_dir = image_dir

# Define specific icons
class HuggingFace(CustomIcon):
    _icon = "huggingface.png"

class Streamlit(CustomIcon):
    _icon = "streamlit.png"

class OpenAI(CustomIcon):
    _icon = "openai.png"

class AWSS3(CustomIcon):
    _icon = "aws_s3.png"

# Diagram structure
with Diagram("Model Data Pipeline Architecture", show=True, direction="TB"):

    # Define the user interacting with the system
    user = Users("User")

    # Define Hugging Face cluster
    with Cluster("Hugging Face"):
        hugging_face = HuggingFace("Hugging Face Model")
        metadata_files = Custom("Metadata & Files", os.path.join(image_dir, "files.png"))

    # Define AWS S3 Storage
    with Cluster("Data Storage"):
        s3_bucket = AWSS3("AWS S3 Bucket")

    # Define User Interface with Streamlit
    with Cluster("User Interface"):
        streamlit_app = Streamlit("Streamlit App")

    # Define OpenAI cluster
    with Cluster("OpenAI"):
        openai_api = OpenAI("OpenAI API")

    # Connecting the diagram nodes
    hugging_face >> Edge(label="Upload Data") >> s3_bucket
    s3_bucket >> Edge(label="Load to App") >> streamlit_app
    streamlit_app >> Edge(label="Query API") >> openai_api
    openai_api >> Edge(label="Response") >> streamlit_app
    streamlit_app >> Edge(label="Show Results") >> user

    # Metadata connection
    hugging_face - Edge(style="dashed", color="blue") - metadata_files

!ls /usr/local/share/diagrams/resources/custom

##Correct
import os
import requests

# Directory to store images
image_dir = "/usr/local/share/diagrams/resources/custom"

# Create directory if it does not exist
os.makedirs(image_dir, exist_ok=True)

# List of image URLs and filenames
image_urls = {
    "huggingface": "https://raw.githubusercontent.com/huggingface/transformers/master/docs/source/_static/huggingface_logo.png",
    "streamlit": "https://streamlit.io/images/brand/streamlit-mark-color.png",
    "openai": "https://seeklogo.com/images/O/open-ai-logo-8B9BFEDC26-seeklogo.com.png",
}

# Download and save images
for name, url in image_urls.items():
    try:
        response = requests.get(url)
        response.raise_for_status()  # Check for HTTP errors
        image_path = os.path.join(image_dir, f"{name}.png")

        # Save image
        with open(image_path, "wb") as f:
            f.write(response.content)
        print(f"Downloaded {name} icon successfully.")
    except Exception as e:
        print(f"Failed to download {name} icon: {e}")

from google.colab import files
uploaded = files.upload()

##Perfect one
# Importing diagrams with custom icons
from diagrams import Diagram, Cluster, Edge, Node
from diagrams.custom import Custom
from diagrams.onprem.client import Users
from diagrams.aws.storage import S3
import os

# Define custom icon class
class CustomIcon(Node):
    _provider = "custom"
    _icon_dir = "/usr/local/share/diagrams/resources/custom"  # Path where the images are stored

# Define specific icons using the downloaded images
class HuggingFace(CustomIcon):
    _icon = "huggingface.png"

class Streamlit(CustomIcon):
    _icon = "streamlit.png"

class OpenAI(CustomIcon):
    _icon = "openai.png"

class AWSS3(CustomIcon):
    _icon = "aws_s3.png"

# Diagram structure
with Diagram("Model Data Pipeline Architecture", show=True, direction="TB"):

    # Define the user interacting with the system
    user = Users("User")

    # Define Hugging Face cluster with updated image
    with Cluster("Hugging Face"):
        hugging_face = Custom("Hugging Face(GAIA dataset)", "/content/huggingface.png")  # Update path if necessary
        metadata_files = Custom("Metadata file", "/content/metadata.png",)

    # Define AWS S3 Storage
    with Cluster("Data Storage"):
        s3_bucket = S3("AWS S3 Bucket")

    # Define User Interface with Streamlit
    with Cluster("User Interface"):
        streamlit_app = Streamlit("Streamlit App")

    # Define OpenAI cluster
    with Cluster("OpenAI"):
        openai_api = OpenAI("OpenAI API")

    # Connecting the diagram nodes
    hugging_face >> Edge(label="Upload Data into S3") >> s3_bucket
    s3_bucket >> Edge(label="Load the data to the application") >> streamlit_app
    streamlit_app >> Edge(label="Select use case and validate(includes steps if necessary)") >> openai_api
    openai_api >> Edge(label="Finale result and validation") >> streamlit_app
    streamlit_app >> Edge(label="User interaction with the application") >> user
    openai_api >> user

    # Metadata connection
    hugging_face - Edge(style="dashed", color="red") - metadata_files

from IPython.display import Image, display
display(Image(filename="model_data_pipeline_architecture.png"))

!ls /content/



from diagrams import Diagram, Cluster, Edge, Node
from diagrams.custom import Custom
from diagrams.onprem.client import Users
from diagrams.aws.storage import S3
import os

# Define custom icon class
class CustomIcon(Node):
    _provider = "custom"
    _icon_dir = "/usr/local/share/diagrams/resources/custom"  # Path where the images are stored

# Define specific icons using the downloaded images
class HuggingFace(CustomIcon):
    _icon = "huggingface.png"

class Streamlit(CustomIcon):
    _icon = "streamlit.png"

class OpenAI(CustomIcon):
    _icon = "openai.png"

class AWSS3(CustomIcon):
    _icon = "aws_s3.png"

class MetadataFiles(CustomIcon):
    _icon = "metadata.png"

# Diagram structure
with Diagram("Model Data Pipeline Architecture", show=True, direction="TB"):

    # Define the user interacting with the system
    user = Users("User")

    # Define Hugging Face cluster with updated image
    with Cluster("Hugging Face"):
        hugging_face = Custom("Hugging Face(GAIA dataset)", "/content/huggingface.png")  # Update path if necessary
        metadata_files = Custom("Metadata file", "/content/metadata.png")

    # Define AWS S3 Storage
    with Cluster("Data Storage"):
        s3_bucket = S3("AWS S3 Bucket")

    # Define User Interface cluster with all components
    with Cluster("User Interface (Streamlit App)"):
        streamlit_app = Streamlit("Streamlit App")

        validation_test_selection = Streamlit("Validation Test Selection")

        with Cluster("Validation Process"):
         validation_approved = Streamlit("Validation Approved, matched with final answer")
         validation_disapproved = Custom("Annotator Steps Validation, need to refer steps","/content/metadata.png")  # Metadata file icon for disapproved

        streamlit_reports = Streamlit("Streamlit Final Report")

    # Define OpenAI cluster
    with Cluster("OpenAI"):
        openai_api = OpenAI("OpenAI API")

    # Connecting the main diagram nodes
    hugging_face >> Edge(label="Upload Data into S3") >> s3_bucket
    s3_bucket >> Edge(label="Load data to the application") >> streamlit_app
    streamlit_app >> Edge(label="Select use case and validate(includes steps if necessary)") >> openai_api
    openai_api >> Edge(label="Finale result and validation") >> streamlit_app
    streamlit_app >> Edge(label="User interaction with the application") >> user
    openai_api >> user

    # Connecting components inside User Interface cluster
    validation_test_selection >> validation_approved >> streamlit_reports
    validation_test_selection >> validation_disapproved >> streamlit_reports

    # Metadata connection
    hugging_face - Edge(style="dashed", color="red") - metadata_files

from IPython.display import Image, display
display(Image(filename="model_data_pipeline_architecture.png"))

